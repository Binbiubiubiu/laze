'use strict';

// Fix eslint shareable config (https://github.com/eslint/eslint/issues/3458)
require('@rushstack/eslint-patch/modern-module-resolution');

const { jsExts } = require('./constants');

module.exports = {
  env: {
    jest: true,
    es6: true,
    browser: true,
    node: true,
  },
  extends: [
    'standard',
    'plugin:import/recommended',
    'plugin:jsonc/recommended-with-jsonc',
    'plugin:yml/standard',
    'plugin:markdown/recommended',
    'prettier',
  ],
  ignorePatterns: [
    'logs',
    // Diagnostic reports (https://nodejs.org/api/report.html)
    'report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json',
    '*.lock',
    // Directory for instrumented libs generated by jscoverage/JSCover
    'lib-cov',
    // Coverage directory used by tools like istanbul
    'coverage',
    '*.lcov',
    'bower_components',
    // Compiled binary addons (https://nodejs.org/api/addons.html)
    'build/Release',
    // Dependency directories
    'jspm_packages/',
    // Snowpack dependency directory (https://snowpack.dev/)
    'web_modules/',
    // Next.js build output
    'out',
    // Nuxt.js build / generate output
    'dist',
    // Comment in the public line in if your project uses Gatsby and not Next.js
    // https://nextjs.org/blog/next-9-1#public-directory-support
    'public',
    '*.min.*',
    '*.d.ts',
    'CHANGELOG.md',
    'LICENSE*',
    'temp',
    'package-lock.json',
    'pnpm-lock.yaml',
    '__snapshots__',
    '_site',
  ],
  plugins: ['unicorn', 'unused-imports'],
  settings: {
    'import/extensions': jsExts,
    'import/resolver': {
      node: { extensions: jsExts },
    },
  },
  overrides: [
    {
      files: ['*.yaml', '*.yml'],
      parser: require.resolve('yaml-eslint-parser'),
      rules: {
        'spaced-comment': 'off',
      },
    },
    {
      files: ['*.js', '*.cjs', '*.jsx'],
      rules: {
        '@typescript-eslint/no-var-requires': 'off',
        '@typescript-eslint/no-require-imports': 'off',
      },
    },
    {
      files: ['package.json'],
      parser: require.resolve('jsonc-eslint-parser'),
      rules: {
        'jsonc/sort-keys': [
          'error',
          {
            pathPattern: '^$',
            order: [
              'publisher',
              'name',
              'displayName',
              'type',
              'version',
              'private',
              'packageManager',
              'description',
              'author',
              'license',
              'funding',
              'homepage',
              'repository',
              'bugs',
              'keywords',
              'categories',
              'sideEffects',
              'exports',
              'main',
              'module',
              'unpkg',
              'jsdelivr',
              'types',
              'typesVersions',
              'bin',
              'icon',
              'files',
              'engines',
              'activationEvents',
              'contributes',
              'scripts',
              'peerDependencies',
              'peerDependenciesMeta',
              'dependencies',
              'optionalDependencies',
              'devDependencies',
              'pnpm',
              'overrides',
              'resolutions',
              'husky',
              'simple-git-hooks',
              'lint-staged',
              'eslintConfig',
            ],
          },
          {
            pathPattern: '^(?:dev|peer|optional|bundled)?[Dd]ependencies$',
            order: { type: 'asc' },
          },
          {
            pathPattern: '^exports.*$',
            order: ['types', 'require', 'import', 'default'],
          },
        ],
      },
    },
    {
      files: ['*.d.ts'],
      rules: {
        'import/no-duplicates': 'off',
      },
    },
    {
      files: ['**/*.md/**'],
      rules: {
        'import/no-unresolved': 'off',
        'unused-imports/no-unused-imports': 'off',
        'unused-imports/no-unused-vars': 'off',
        'no-restricted-imports': 'off',
      },
    },
  ],
  rules: {
    // import
    'import/order': 'error',
    'import/namespace': 'off',
    'import/no-absolute-path': 'off',
    'import/no-unresolved': 'off',
    'import/no-named-as-default-member': 'off',
    'import/no-named-as-default': 'off',
    'import/no-mutable-exports': 'error',
    'import/newline-after-import': ['error', { count: 1, considerComments: true }],

    // Common
    'no-param-reassign': 'off',
    camelcase: 'off',
    'no-constant-condition': 'warn',
    'no-debugger': 'error',
    'no-console': 'off',
    'no-cond-assign': ['error', 'always'],
    'no-restricted-syntax': ['error', 'DebuggerStatement', 'LabeledStatement', 'WithStatement'],
    'no-return-await': 'off',
    'no-var': 'error',
    'prefer-const': [
      'error',
      {
        destructuring: 'all',
        ignoreReadBeforeAssign: true,
      },
    ],
    'prefer-arrow-callback': [
      'error',
      {
        allowNamedFunctions: false,
        allowUnboundThis: true,
      },
    ],
    'object-shorthand': [
      'error',
      'always',
      {
        avoidQuotes: true,
        ignoreConstructors: false,
      },
    ],
    'prefer-exponentiation-operator': 'error',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    'spaced-comment': [
      'error',
      'always',
      {
        line: {
          markers: ['/'],
          exceptions: ['/', '#'],
        },
        block: {
          markers: ['!'],
          exceptions: ['*'],
          balanced: true,
        },
      },
    ],

    // best
    'array-callback-return': 'error',
    'block-scoped-var': 'error',
    'consistent-return': 'off',
    complexity: 'off',
    eqeqeq: ['error', 'smart'],
    'no-case-declarations': 'error',
    'no-multi-str': 'error',
    'no-with': 'error',
    'no-void': 'error',
    'no-useless-escape': 'off',
    'vars-on-top': 'error',
    'require-await': 'off',
    'no-return-assign': 'off',
    'max-statements-per-line': ['error', { max: 1 }],
    'no-use-before-define': [
      'error',
      {
        functions: false,
        classes: false,
        variables: true,
        allowNamedExports: true,
      },
    ],
    'sort-imports': [
      'error',
      {
        ignoreCase: false,
        ignoreDeclarationSort: true,
        ignoreMemberSort: false,
        memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
        allowSeparatedGroups: false,
      },
    ],

    // node
    'n/no-callback-literal': 'off',

    // unused-imports
    'unused-imports/no-unused-imports': 'error',
    'unused-imports/no-unused-vars': [
      'warn',
      {
        vars: 'all',
        varsIgnorePattern: '^_',
        args: 'after-used',
        argsIgnorePattern: '^_',
      },
    ],

    // unicorns
    'unicorn/error-message': 'error',
    'unicorn/escape-case': 'error',
    'unicorn/new-for-builtins': 'error',
    'unicorn/no-instanceof-array': 'error',
    'unicorn/no-await-expression-member': 'error',
    'unicorn/no-unnecessary-await': 'error',
    'unicorn/no-unreadable-array-destructuring': 'error',
    'unicorn/no-unreadable-iife': 'error',
    'unicorn/number-literal-case': 'error',
  },
};
